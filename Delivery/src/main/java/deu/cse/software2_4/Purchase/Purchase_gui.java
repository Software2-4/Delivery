/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package deu.cse.software2_4.Purchase;

import deu.cse.software2_4.Order.Korean_restaurant_info;
import deu.cse.software2_4.SignUp.Sign;
import deu.cse.software2_4.UserLogin.Login;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author KMS
 */
public class Purchase_gui extends javax.swing.JFrame {

    String order_info;
    String changeOrder;
    ArrayList<String> orderlist = new ArrayList<>();
    ArrayList<String> orderfile = new ArrayList<>();
    ButtonGroup purchase_option = new ButtonGroup();

    Login checkid = new Login();
    boolean checkpay = false;

    /**
     * Creates new form purchase
     */
    public Purchase_gui() {
        initComponents();
        setSize(420, 600);
        setLocationRelativeTo(null);
        purchase_option.add(card_purchase);
        purchase_option.add(cash_purchase);

        try {
            ShowOrder();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Korean_restaurant_info.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Korean_restaurant_info.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        payment = new javax.swing.JLabel();
        order_check = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        order_list = new javax.swing.JList<>();
        price_payment = new javax.swing.JLabel();
        total_price_payment = new javax.swing.JTextField();
        payment_last = new javax.swing.JButton();
        jButton_Back = new javax.swing.JButton();
        cash_purchase = new javax.swing.JRadioButton();
        card_purchase = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        payment.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        payment.setText("결제");

        order_check.setFont(new java.awt.Font("맑은 고딕", 1, 14)); // NOI18N
        order_check.setText("주문확인");

        jScrollPane1.setViewportView(order_list);

        price_payment.setFont(new java.awt.Font("굴림", 1, 14)); // NOI18N
        price_payment.setText("결제가격 : ");

        payment_last.setFont(new java.awt.Font("맑은 고딕", 1, 14)); // NOI18N
        payment_last.setText("결제");
        payment_last.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payment_lastActionPerformed(evt);
            }
        });

        jButton_Back.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        jButton_Back.setText("뒤로 가기");
        jButton_Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_BackActionPerformed(evt);
            }
        });

        cash_purchase.setText("현금 결제");
        cash_purchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cash_purchaseActionPerformed(evt);
            }
        });

        card_purchase.setText("카드 결제");
        card_purchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card_purchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(payment, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton_Back))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(payment_last, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(48, 48, 48)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(price_payment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(18, 18, 18)
                                    .addComponent(total_price_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(order_check, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(cash_purchase, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(card_purchase, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(payment, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Back))
                .addGap(18, 18, 18)
                .addComponent(order_check, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(price_payment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(total_price_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cash_purchase)
                    .addComponent(card_purchase))
                .addGap(18, 18, 18)
                .addComponent(payment_last, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 86, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_BackActionPerformed
        dispose();
    }//GEN-LAST:event_jButton_BackActionPerformed

    private void payment_lastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payment_lastActionPerformed
        // TODO add your handling code here:
        User u1 = new User();
        String[] changePaylog;
        String changepaystate = "";
        changePaylog = changeOrder.split("/");

        if (checkpay) {
            JOptionPane.showMessageDialog(null, "이미 결제가 완료되었습니다.");
        } else {
            FileOutputStream output;
            try {
                output = new FileOutputStream("/Users/gyueop/Documents/JeongGyuEop_Document/GIT/Delivery/Delivery/DB/Order.txt", false);
                OutputStreamWriter writer = new OutputStreamWriter(output, "UTF-8");
                BufferedWriter out = new BufferedWriter(writer);

                if (cash_purchase.isSelected()) {
                    changePaylog[4] = "현금결제/";
                    changePaylog[5] = "배달중";
                    for (int i = 0; i < (changePaylog.length) - 2; i++) {
                        changepaystate += changePaylog[i] + "/";
                    }
                    changepaystate += changePaylog[4];
                    changepaystate += changePaylog[5];

                    orderfile.add(changepaystate);
                    for (int j = 0; j < orderfile.size(); j++) {
                        out.write(orderfile.get(j) + "\n");
                    }
                    u1.setMeasurement(new Cash_Payment());
                    dispose();
                } else if (card_purchase.isSelected()) {
                    changePaylog[4] = "카드결제/";
                    changePaylog[5] = "배달중";
                    for (int i = 0; i < (changePaylog.length) - 2; i++) {
                        changepaystate += changePaylog[i] + "/";
                    }
                    changepaystate += changePaylog[4];
                    changepaystate += changePaylog[5];

                    orderfile.add(changepaystate);
                    for (int j = 0; j < orderfile.size(); j++) {
                        out.write(orderfile.get(j) + "\n");
                    }
                    u1.setMeasurement(new Card_Payment());
                    dispose();
                } else {

                }

                out.close();
                dispose();

            } catch (FileNotFoundException ex) {
                Logger.getLogger(Sign.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(Sign.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Sign.class.getName()).log(Level.SEVERE, null, ex);
            }

            JOptionPane.showMessageDialog(null, u1.doPurchase(total_price_payment.getText()));
        }
    }//GEN-LAST:event_payment_lastActionPerformed

    private void card_purchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card_purchaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_card_purchaseActionPerformed

    private void cash_purchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cash_purchaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cash_purchaseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Purchase_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Purchase_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Purchase_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Purchase_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Purchase_gui().setVisible(true);
            }
        });
    }

    public void ShowOrder() throws FileNotFoundException, UnsupportedEncodingException, IOException {

        FileInputStream input;
        String[] order_arry = null;
        String[] menuorder_arry = null;

        order_list.setModel(new DefaultListModel());
        DefaultListModel model = (DefaultListModel) order_list.getModel();

        input = new FileInputStream("/Users/gyueop/Documents/JeongGyuEop_Document/GIT/Delivery/Delivery/DB/Order.txt");
        InputStreamReader reader = new InputStreamReader(input, "UTF-8");
        BufferedReader in = new BufferedReader(reader);

        while ((order_info = in.readLine()) != null) {
            order_arry = order_info.split("/");
            if (order_arry[0].equals(checkid.getReturnid())) {
                menuorder_arry = order_arry[1].split(",");
                total_price_payment.setText(order_arry[2]);
                changeOrder = order_info;
                if (order_arry[4].equals("현금결제") || order_arry[4].equals("카드결제")) {
                    checkpay = true;
                } else {
                    checkpay = false;
                }
            } else {
                orderfile.add(order_info);
            }
        }
        for (int n = 0; n < menuorder_arry.length; n++) {
            orderlist.add(menuorder_arry[n]);
        }
        for (int j = 0; j < orderlist.size(); j++) {
            model.addElement(orderlist.get(j));
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton card_purchase;
    private javax.swing.JRadioButton cash_purchase;
    private javax.swing.JButton jButton_Back;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel order_check;
    private javax.swing.JList<String> order_list;
    private javax.swing.JLabel payment;
    private javax.swing.JButton payment_last;
    private javax.swing.JLabel price_payment;
    private javax.swing.JTextField total_price_payment;
    // End of variables declaration//GEN-END:variables
}
